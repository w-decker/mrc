}
spr333(y ~ x1 + x2, voi = x1, vni = x2, data = d)
View(d)
spr333 <- function(f, voi, vni, data){
x <- cor(data[as.character(formula.tools::lhs(f))],
resid(lm(data[as.character(voi)] ~ data[as.character(vni)], data = data)))
return(x)
}
spr333(y ~ x1 + x2, voi = x1, vni = x2, data = d)
spr333 <- function(dep, ivi, ivn){
x <- cor(dep, resid(lm(ivi ~ ivn)))
return(x)
}
spr333(dep = d$y, ivi = d$x1, ivn = d$x2)
x <- y~ x1 + x2
labels(terms(x))
as.vector(labels(terms(x)))
int <- x1
int <- as.vector(x1)
int
v <- as.character(labels(terms(x)))
v
ivi <- v[1]
ivi
ivn <- mapply(setdiff, indep, ivi)
ivn <- mapply(setdiff, v, ivi)
ivn
ivi
str(ivn)
?mapply
ivn
ivn[1]
ivn[2]
ivn <- mapply(setdiff, v, ivi)[2]
ivn
sprf <- function(f, ivi, data){
dep <- formula.tools::lhs(f)
indep <- labels(terms(f))
ivi <- indep[ivi]
ivn <- mapply(setdiff, indep, ivi)
cor(dep, resid(lm(data[ivi] ~ data[ivn])))
}
sprf(y~x1 + x2, ivi = 1, data = d)
ivn
sprf <- function(f, ivi, data){
dep <- formula.tools::lhs(f)
indep <- labels(terms(f))
ivi <- indep[ivi]
ivn <- mapply(setdiff, indep, ivi)
cor(dep, resid(lm(data[ivi] ~ data[as.character(ivn)])))
}
sprf(y~x1 + x2, ivi = 1, data = d)
sprf <- function(f, ivi, data){
dep <- formula.tools::lhs(f)
indep <- labels(terms(f))
ivi <- indep[ivi]
ivn <- mapply(setdiff, indep, ivi)
cor(dep, resid(lm(data[ivi] ~ data[ivn[1]])))
}
sprf(y~x1 + x2, ivi = 1, data = d)
sprf <- function(f, ivi, data){
dep <- formula.tools::lhs(f)
indep <- labels(terms(f))
ivi <- indep[ivi]
ivn <- mapply(setdiff, indep, ivi)
cor(dep, resid(lm(data[ivi] ~ data[ivn])))
}
sprf(y~x1 + x2, ivi = 1, data = d)
sprf <- function(f, ivi, data){
dep <- formula.tools::lhs(f)
indep <- labels(terms(f))
ivi <- indep[ivi]
ivn <- mapply(setdiff, indep, ivi)
cor(dep, resid(lm(data[ivi] ~ data[ivn[2]])))
}
sprf(y~x1 + x2, ivi = 1, data = d)
sprf <- function(f, ivi, data){
dep <- formula.tools::lhs(f)
indep <- labels(terms(f))
ivi <- indep[ivi]
ivn <- mapply(setdiff, indep, ivi)
cor(dep, resid(lm(data[ivi] ~ data[as.character(ivn[2]])))
sprf <- function(f, ivi, data){
dep <- formula.tools::lhs(f)
indep <- labels(terms(f))
ivi <- indep[ivi]
ivn <- mapply(setdiff, indep, ivi)
cor(dep, resid(lm(data[ivi] ~ data[as.character(ivn[2])]))
}
sprf <- function(f, ivi, data){
dep <- formula.tools::lhs(f)
indep <- labels(terms(f))
ivi <- indep[ivi]
ivn <- mapply(setdiff, indep, ivi)
cor(dep, resid(lm(data[ivi] ~ data[as.character(ivn[2])])))
}
sprf(y~x1 + x2, ivi = 1, data = d)
f <- y ~ x1 + x2
dep <- formula.tools::lhs(f)
dep
indep <- labels(terms(f))
indep
str(indep)
ivi <- indep[ivi]
str(ivi)
ivi <- indep[ivi]
str(ivi)
ivi <- 1
ivi <- indep[ivi]
str(ivi)
ivn <- mapply(setdiff, indep, ivi)
str(ivn)
ivn <- setdiff(ivi, indep)
ivn
ivii <- 1
dep <- formula.tools::lhs(f)
indep <- labels(terms(f))
ivi <- indep[ivii]
ivn <- setdiff(indep, indep)
ivn
?setdiff
indep <- as.list(labels(terms(f)))
ivn <- setdiff(indep, indep)
ivn
ivn <- setdiff(indep, indep)
ivn <- setdiff(ivi, indep)
ivn
ivi <- indep[ivii]
ivi
indep
indep <- labels(terms(f))
indep
indep <- as.list(labels(terms(f)))
ivi <- indep[ivii]
ivn <- setdiff(as.list(ivi), indep)
ivn
as.list(ivi)
ivn <- setdiff(indep, as.list(ivi))
ivn
sprf <- function(f, ivii, data){
dep <- formula.tools::lhs(f)
indep <- as.list(labels(terms(f)))
ivi <- indep[ivii]
ivn <- setdiff(indep, as.list(ivi))
cor(dep, resid(lm(data[ivi] ~ data[ivn])))
}
sprf(y~x1 + x2, ivi = 1, data = d)
str(ivn)
str(ivn[1])
str(as.character(ivn[1]))
str(as.character(ivn))
sprf <- function(f, ivii, data){
dep <- formula.tools::lhs(f)
indep <- labels(terms(f))
ivi <- indep[ivii]
ivn <- setdiff(as.list(indep), as.list(ivi))
cor(dep, resid(lm(data[ivi] ~ data[as.character(ivn)])))
}
sprf(y~x1 + x2, ivi = 1, data = d)
sprf <- function(f, ivii, data){
dep <- formula.tools::lhs(f)
indep <- labels(terms(f))
ivi <- indep[ivii]
ivn <- setdiff(as.list(indep), as.list(ivi))
cor(dep, resid(lm(data[as.character(ivi)] ~ data[as.character(ivn)])))
}
sprf(y~x1 + x2, ivi = 1, data = d)
f <- y ~ x1 + x2
ivii <- 1
dep <- formula.tools::lhs(f)
indep <- as.list(labels(terms(f)))
ivi <- indep[ivii]
ivn <- setdiff(indep, as.list(ivi))
str(as.character(ivn))
d[ivn]
d[as.character(ivn)]
d[ivi]
d[as.character(ivi)]
sprf <- function(f, ivii, data){
dep <- formula.tools::lhs(f)
indep <- as.list(labels(terms(f)))
ivi <- indep[ivii]
ivn <- setdiff(indep, as.list(ivi))
cor(dep, resid(lm(data[as.character(ivi)] ~ data[as.character(ivn)])))
}
sprf(y~x1 + x2, ivi = 1, data = d)
d <- mrc::simdat(n=100, r=0.2)
sprf(y~x1 + x2, ivi = 1, data = d)
f <- y ~ x1 + x2
ivii <- 1
dep <- formula.tools::lhs(f)
indep <- as.list(labels(terms(f)))
ivi <- indep[ivii]
ivn <- setdiff(indep, as.list(ivi))
str(as.character(ivn))
d[as.character(ivn)]
d[as.character(ivi)]
cor(dep, resid(lm(x1 ~ x2)))
x1 <- d[as.character(ivn)]
x2 <- d[as.character(ivi)]
cor(dep, resid(lm(x1 ~ x2)))
str(x1)
sprf <- function(f, ivii, data){
dep <- formula.tools::lhs(f)
indep <- as.list(labels(terms(f)))
ivi <- indep[ivii]
ivn <- setdiff(indep, as.list(ivi))
cor(dep, resid(lm(data[as.character(ivi)] ~ data[as.character(ivn)])))
}
sprf(y~x1 + x2, ivi = 1, data = d)
sprf3 <- function(f, ivii, data){
dep <- formula.tools::lhs(f)
indep <- as.list(labels(terms(f)))
ivi <- indep[ivii]
ivn <- setdiff(indep, as.list(ivi))
formula_string <- paste(names(dep), "~", paste(names(ivi), paste(names(ivn), collapse = " + "), sep = " + "))
formula_lm <- as.formula(formula_string)
cor(dep, resid(lm(formula_lm, data = data)))
}
sprf3(y ~ x1 + x2, ivii = 1, data = d)
sprf4 <- function(f, ivii, data){
dep <- formula.tools::lhs(f)
indep <- as.list(labels(terms(f)))
ivi <- indep[ivii]
ivn <- setdiff(indep, as.list(ivi))
if (length(dep) == 0 || length(ivi) == 0 || length(ivn) == 0) {
stop("Invalid formula or independent variable index")
}
formula_string <- paste(names(dep), "~", paste(names(ivi), paste(names(ivn), collapse = " + "), sep = " + "))
formula_lm <- as.formula(formula_string)
cor(dep, resid(lm(formula_lm, data = data)))
}
sprf4(y ~ x1 + x2, ivii = 1, data = d)
sprf5 <- function(f, ivii, data) {
dep <- formula.tools::lhs(f)
indep <- as.list(labels(terms(f)))
ivi <- indep[ivii]
ivn <- setdiff(indep, as.list(ivi))
formula_string <- paste(deparse(dep), "~", paste(deparse(ivi), paste(deparse(ivn), collapse = " + "), sep = " + "))
formula_lm <- as.formula(formula_string)
cor(dep, resid(lm(formula_lm, data = data)))
}
# Example usage
sprf5(y ~ x1 + x2, ivii = 1, data = your_data_frame)
# Example usage
sprf5(y ~ x1 + x2, ivii = 1, data = d)
sprf6 <- function(f, ivii, data) {
dep <- formula.tools::lhs(f)
indep <- as.list(labels(terms(f)))
ivi <- indep[ivii]
ivn <- setdiff(indep, ivi)
formula_lm <- as.formula(paste(dep, "~", paste(ivi, paste(ivn, collapse = " + "), sep = " + ")))
cor(dep, resid(lm(formula_lm, data = data)))
}
# Example usage
sprf6(y ~ x1 + x2, ivii = 1, data = d)
f <- y ~ x1 + x2
ivii <- 2
dep <- formula.tools::lhs(f)
indep <- as.list(labels(terms(f)))
ivi <- indep[ivii]
ivn <- setdiff(indep, as.list(ivi))
cor(dep, resid(lm(data[as.character(ivi)] ~ data[as.character(ivn)])))
ivi
str(ivi)
deparse(ivi)
unlist(ivi)
str(unlist(ivi))
cor(dep, resid(lm(data[as.character(unlist(ivi))] ~ data[as.character(ivn)])))
cor(dep, resid(lm(data[unlist(ivi)] ~ data[as.character(ivn)])))
?data
cor(dep, resid(lm(d[unlist(ivi)] ~ d[as.character(ivn)])))
ivn <- unlist(ivn)
ivn
ivn <- unlist(ivn)
ivn
ivi
ivi <- unlist(ivi)
ivi
cor(dep, resid(lm(d[unlist(ivi)] ~ d[ivn])))
cor(dep, resid(lm(d[ivi] ~ d[ivn])))
ivi
ivn
str(ivn)
str(ivi)
d[ivi]
mean(d[ivi])
mean(d$ivi)
mean(d[as.character(ivi)])
d[ivi]
cor(dep, resid(lm(as.data.frame(d[ivi]) ~ as.data.frame(d[ivn]))))
cor(dep, resid(lm(data.frame(d[ivi]) ~ data.frame(d[ivn]))))
?lm
d <- mrc::simdat(n=100, r = 0.01)
f <- y ~ x1 + x2
library(formula.tools)
x <- rhs(f)
x <- as.formula(rhs(f))
?cor
d[lhs(f)]
d[as.character(lhs(f))]
cor(y, x1, data=d)
y <- d[as.character(lhs(f))]
x <- as.formula(rhs(f))
x <- rhs(f)
x <- rhs(f)
x
cor(y, resid(lm(x, data = d))
cor(y, resid(lm(x, data = d)))
y <- d[as.character(lhs(f))]
x <- rhs(f)
cor(y, resid(lm(x, data = d)))
cor(y, resid(lm(as.formula(x), data = d)))
x <- as.formula(rhs(f))
x <- terms(labels(f))
x <- labels(terms(f))
x
as.formula(x)
x[1]
x[2]
cor(y, resid(lm(x[1] ~ x[2], data = d)))
cor(y, resid(lm(as.symbol(x[1]) ~ as.symbol(x[2]), data = d)))
as.symbol(x[1])
pp <- lm(as.symbol(x[1]) ~ as.symbol(x[2]), data = d)
cor(y, resid(lm(x[1] ~ x[2], data = d)))
cor(y, resid(lm(d[x[1]] ~ d[x[2]])))
y <- d[as.character(lhs(f))]
y
x <- labels(terms(f))
x
d[x[1]]
(cor(y, d[x[1]]) - (cor(d[x[1]], d[x[2]]) * cor(d[x[2]], y)))/sqrt(1-cor(d[x[1]], d[x[1]])^2)
# create indep variables
x1 <- rnorm(100) # first indep variable used for predicting
x2 <- (x1 * 0.2) + rnorm(100) # second indep variable
str(x1)
str(d[x[1]])
str(as.numeric(d[x[1]]))
str(numeric(d[x[1]]))
as.numeric(d[x[1]])
as.matrix(d[x[1]])
xxx <- as.matrix(d[x[1]])
xxx
x2 <- as.matrix(d[x[2]])
(cor(y, xxx) - (cor(xxx, x2) * cor(x2, y)))/sqrt(1-cor(xxx, x2)^2)
spr2 <- function(dep, ivi, ivn){
x <- cor(dep, resid(lm(ivi ~ ivn)))
return(c("Semi-partial correlation" = x))
}
spr2(dep = d$y, ivi = d$x1, ivn = d$x2)
sprf <- function(f, data){
y <- data[as.character(formula.tools::lhs(f))]
indep <- labels(terms(f))
ivi <- as.matrix(data[indep[1]])
ivn <- as.matrix(data[indep[2]])
x <- (cor(y, ivi) - (cor(ivi, ivn) * cor(ivn, y)))/sqrt(1-cor(ivi, ivn)^2)
return(c("Semi-partial correlation" = x))
}
sprf(y~x1 + x2, data =d)
devtools::document()
devtools::document()
devtools::document()
devtools::install_github("w-decker/mrc")
?sprf
devtools::document()
devtools::install_github("w-decker/mrc")
?sprf
f <- y ~ x1 + x2
length(formula.tools::lhs(f))
length(deparse(formula.tools::lhs(f)))
length(labels(terms(f))
length(labels(terms(f)))
length(labels(terms(f))
length(terms(labels(f))
length(terms(labels(f)))
length(terms(labels(f)))
length(labels(terms(f)))
se <- function(f, data){
N <- nrow(data)
K <- length(labels(terms(f)))
df <- N - K - 1
r2 <- lm(f, data = data)$r.squared
se <- sqrt((1 - r2)/df)
}
d <- mrc::simdat(n = 100, r = 0.4)
se <- (y ~ x1 + x2, data = d)
se <- function(f, data){
N <- nrow(data)
K <- length(labels(terms(f)))
df <- N - K - 1
r2 <- lm(f, data = data)$r.squared
se <- sqrt((1 - r2)/df)
return(c("Standard error" = se))
}
se <- (y ~ x1 + x2, data = d)
se <- (y ~ x1 + x2, data = d)
se <- (y ~ x1 + x2 data = d)
se <- (f = y ~ x1 + x2, data = d)
df <- N - K - 1
N <- nrow(d)
d <- mrc::simdat(n = 100, r = 0.4)
f <- y ~ x1 + x2
K <- length(labels(terms(f)))
df <- N - K - 1
r2 <- lm(f, data = data)$r.squared
r2 <- lm(f, data = d)$r.squared
?lm
r2 <- summary(lm(f, data = d))$r.squared
se <- sqrt((1 - r2)/df)
se <- sqrt((1 - r2)/df)
se <- function(f, data){
N <- nrow(data)
K <- length(labels(terms(f)))
df <- N - K - 1
r2 <- summary(lm(f, data = data))$r.squared
se <- sqrt((1 - r2)/df)
return(c("Standard error" = se))
}
se <- function(f, data){
N <- nrow(data)
K <- length(labels(terms(f)))
df <- N - K - 1
r2 <- summary(lm(f, data = data))$r.squared
se <- sqrt((1 - r2)/df)
return(c("Standard error" = se))
}
d <- mrc::simdat(n = 100, r = 0.4)
se(y ~ x1 + x2, data=d)
f <- y ~ x1 + x2
d <- mrc::simdat(n = 100, r = 0.4)
s <- mrc::se(f = f, data = d)
s <- se(f = f, data = d)
r <- mrc::sprf(f = f, data = d)
t <- s/r
t
tsr <- function(f, data){
s <- mrc::se(f = f, data = data)
r <- mrc::sprf(f = f, data = data)
t <- s/r
return("t" = t, "Standard error" = s, "Semi-partial correlation" = r)
}
tsr(y ~ x1 + x2, data = d)
tsr <- function(f, data){
s <- se(f = f, data = data)
r <- mrc::sprf(f = f, data = data)
t <- s/r
return("t" = t, "Standard error" = s, "Semi-partial correlation" = r)
}
tsr(y ~ x1 + x2, data = d)
tsr <- function(f, data){
s <- se(f = f, data = data)
r <- mrc::sprf(f = f, data = data)
t <- s/r
return(c("t" = t, "Standard error" = s, "Semi-partial correlation" = r))
}
tsr(y ~ x1 + x2, data = d)
tsr <- function(f, data){
s <- se(f = f, data = data)
r <- mrc::sprf(f = f, data = data)
t <- s/r
return(c("t" = t, s, r))
}
tsr(y ~ x1 + x2, data = d)
tsr <- function(f, data){
s <- se(f = f, data = data)
r <- mrc::sprf(f = f, data = data)
t <- s/r
return(c("t" = t[1], s, r))
}
tsr(y ~ x1 + x2, data = d)
tsr <- function(f, data){
s <- se(f = f, data = data)
r <- mrc::sprf(f = f, data = data)
t <- s/r
names(t) <- "t"
return(c("t" = t, s, r))
}
tsr(y ~ x1 + x2, data = d)
tsr <- function(f, data){
s <- se(f = f, data = data)
r <- mrc::sprf(f = f, data = data)
t <- s/r
names(t) <- "t"
return(c(t, s, r))
}
tsr(y ~ x1 + x2, data = d)
devtools::document()
devtools::document()
devtools::document()
devtools::install_github("w-decker/mrc")
d <- data(iris)
View(iris)
library(mrc)
data(iris)
View(iris)
tse(Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width, data = iris)
tsr(Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width, data = iris)
deltaR2(fullm = Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width,
restrim = Sepal.Length ~ Sepal.Width, data = iris)
?deltaR2
deltaR2(fullm = Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width,
restrim = Sepal.Length ~ Sepal.Width, data = iris)
open(deltaR2())
deltaR2(fullm = Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width,
restrim = Sepal.Length ~ Sepal.Width + Petal.Length, data = iris)
sprf(Sepal.Length ~ Sepal.Width + Petal.Length, data = iris)
tsr(Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width, data = iris)
devtools
devtools::document()
devtools::document()
devtools::document()
devtools::document()
